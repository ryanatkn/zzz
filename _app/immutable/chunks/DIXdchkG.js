import{T as t,t as _,f as d,F as c,c as i}from"./ChYHAxKB.js";import{A as m,W as f}from"./z7712QSE.js";const p={ping:{send_request:({app:e,data:{request:o}})=>{e.capabilities.handle_ping_sent(o.id)},receive_response:({app:e,data:{output:o}})=>{e.capabilities.handle_ping_received(o.ping_id)},receive_error:({app:e,data:{error:o,request:a}})=>{console.error("[frontend_action_handlers] ping failed:",o),e.capabilities.handle_ping_error(a.id,o.message)}},session_load:{send_request:()=>{console.log("[frontend_action_handlers] loading session...")},receive_response:({app:e,data:{output:o,response:a}})=>{console.log("[frontend_action_handlers] session loaded:",a),e.receive_session(o.data)},receive_error:({data:{error:e}})=>{console.error("[frontend_action_handlers] session load failed:",e)}},completion_create:{send_request:e=>{const{data:{input:o}}=e;console.log("[frontend_action_handlers] sending prompt:",o.completion_request.prompt)},receive_response:e=>{const{app:o,data:{input:a,output:r}}=e;console.log("[frontend_action_handlers] received completion:",a.completion_request,r);const n=a._meta?.progressToken;if(n){const l=o.cell_registry.all.get(n);if(l){if(l instanceof t){const s=_(r.completion_response)||"";l.content=s,l.response=r.completion_response}else console.error("[frontend_action_handlers] unknown cell type for for completion progress_token:",n);return}console.error("[frontend_action_handlers] no assistant turn found for completion progress_token:",n)}},receive_error:({app:e,data:{input:o,error:a}})=>{console.error("[frontend_action_handlers] completion failed:",a);const r=o._meta?.progressToken;if(r){const n=e.cell_registry.all.get(r);n instanceof t&&(n.content=`Error: ${a.message}`,n.error_message=a.message)}}},diskfile_update:{send_request:({data:{input:e}})=>{console.log("[frontend_action_handlers] updating file:",e.path)},receive_response:({data:{input:e,output:o}})=>{console.log("[frontend_action_handlers] updated file:",e.path,o)},receive_error:({data:{input:e,error:o}})=>{console.error("[frontend_action_handlers] update file failed:",e.path,o)}},diskfile_delete:{send_request:({data:{input:e}})=>{console.log("[frontend_action_handlers] deleting file:",e.path)},receive_response:({data:{input:e}})=>{console.log("[frontend_action_handlers] deleted file:",e.path)},receive_error:({data:{input:e,error:o}})=>{console.error("[frontend_action_handlers] delete file failed:",e.path,o)}},directory_create:{send_request:({data:{input:e}})=>{console.log("[frontend_action_handlers] creating directory:",e.path)},receive_response:e=>{console.log("[frontend_action_handlers] created directory:",e)},receive_error:({data:{input:e,error:o}})=>{console.error("[frontend_action_handlers] create directory failed:",e.path,o)}},filer_change:{receive:({app:e,data:{input:o}})=>{e.diskfiles.handle_change(o)}},completion_progress:{receive:({app:e,data:{input:o}})=>{const{chunk:a}=o,r=o._meta?.progressToken,n=r&&e.cell_registry.all.get(r);if(!n||!(n instanceof t)||!a||n.role!==a.message?.role){console.error("[frontend_action_handlers] no matching turn found for progress_token:",r,"chunk:",a);return}n.content+=a.message.content}},toggle_main_menu:{execute:({app:e,data:{input:o}})=>({show:e.ui.toggle_main_menu(o?.show)})},ollama_list:{send_request:({app:e})=>{console.log("[frontend_action_handlers] sending ollama_list request"),e.ollama.handle_ollama_list_start()},receive_response:({app:e,data:{output:o}})=>{console.log("[frontend_action_handlers] received ollama_list response:",o),e.ollama.handle_ollama_list_complete(o)},receive_error:({app:e,data:{error:o}})=>{console.error("[frontend_action_handlers] ollama_list failed:",o),e.ollama.list_status="failure",e.ollama.list_error=o.message,e.ollama.list_last_updated=Date.now()}},ollama_ps:{send_request:({app:e})=>{console.log("[frontend_action_handlers] sending ollama_ps request"),e.ollama.handle_ollama_ps_start()},receive_response:({app:e,data:{output:o}})=>{console.log("[frontend_action_handlers] received ollama_ps response:",o),e.ollama.handle_ollama_ps_complete(o)},receive_error:({app:e,data:{error:o}})=>{console.error("[frontend_action_handlers] ollama_ps failed:",o),e.ollama.ps_status="failure",e.ollama.ps_error=o.message}},ollama_show:{send_request:({data:{input:e}})=>{console.log("[frontend_action_handlers] sending ollama_show request:",e)},receive_response:({app:e,data:{input:o,output:a}})=>{console.log("[frontend_action_handlers] received ollama_show response:",o,a),e.ollama.handle_ollama_show(o,a)},receive_error:({data:{error:e}})=>{console.error("[frontend_action_handlers] ollama_show failed:",e)}},ollama_pull:{send_request:({app:e,data:{input:o}})=>{console.log("[frontend_action_handlers] sending ollama_pull request:",o),e.ollama.pulling_models.add(o.model)},receive_response:({app:e,data:{input:o}})=>{console.log("[frontend_action_handlers] received ollama_pull response:",o),e.ollama.pulling_models.delete(o.model),e.ollama.pull_model_name="",e.ollama.pull_insecure=!1},receive_error:({app:e,data:{input:o,error:a}})=>{console.error("[frontend_action_handlers] ollama_pull failed:",a),e.ollama.pulling_models.delete(o.model)}},ollama_delete:{send_request:({data:{input:e}})=>{console.log("[frontend_action_handlers] sending ollama_delete request:",e)},receive_response:async({app:e,data:{input:o}})=>{console.log("[frontend_action_handlers] received ollama_delete response:",o),await e.ollama.handle_ollama_delete(o)},receive_error:({data:{error:e}})=>{console.error("[frontend_action_handlers] ollama_delete failed:",e)}},ollama_copy:{send_request:({app:e})=>{console.log("[frontend_action_handlers] sending ollama_copy request"),e.ollama.copy_is_copying=!0},receive_response:async({app:e})=>{console.log("[frontend_action_handlers] received ollama_copy response"),e.ollama.copy_source_model="",e.ollama.copy_destination_model="",e.ollama.copy_is_copying=!1,await e.ollama.refresh()},receive_error:({app:e,data:{error:o}})=>{console.error("[frontend_action_handlers] ollama_copy failed:",o),e.ollama.copy_is_copying=!1}},ollama_create:{send_request:({app:e,data:{input:o}})=>{console.log("[frontend_action_handlers] sending ollama_create request:",o),e.ollama.create_is_creating=!0,e.ollama.pulling_models.add(o.model)},receive_response:async({app:e,data:{input:o}})=>{console.log("[frontend_action_handlers] received ollama_create response:",o),e.ollama.pulling_models.delete(o.model),e.ollama.create_model_name="",e.ollama.create_from_model="",e.ollama.create_system_prompt="",e.ollama.create_template="",e.ollama.create_is_creating=!1,await e.ollama.refresh()},receive_error:({app:e,data:{input:o,error:a}})=>{console.error("[frontend_action_handlers] ollama_create failed:",a),e.ollama.pulling_models.delete(o.model),e.ollama.create_is_creating=!1}},ollama_unload:{send_request:({data:{input:e}})=>{console.log("[frontend_action_handlers] sending ollama_unload request:",e)},receive_response:({data:{input:e}})=>{console.log("[frontend_action_handlers] received ollama_unload response:",e)},receive_error:({data:{input:e,error:o}})=>{console.error("[frontend_action_handlers] ollama_unload failed:",e,o)}},ollama_progress:{receive:({app:e,data:{input:o}})=>{const{_meta:a,...r}=o;if(!a){console.error("[frontend_action_handlers] ollama_progress missing _meta");return}const n=a.progressToken;if(!n){console.error("[frontend_action_handlers] ollama_progress missing progress_token");return}const l=e.actions.items.values.find(s=>s.action_event_data?.input?._meta?.progressToken===n);if(!l){console.error("[frontend_action_handlers] ollama_progress cannot find action for progress_token:",n);return}if(!l.action_event){console.error("[frontend_action_handlers] action does not have action_event reference",l);return}l.action_event.update_progress(r)}},provider_load_status:{receive_response:({app:e,data:{output:o}})=>{e.update_provider_status(o.status)}},provider_update_api_key:{receive_response:({app:e,data:{output:o}})=>{e.update_provider_status(o.status)}}},u=d;class v extends c{constructor(o){const a={...o};a.http_rpc_url||(a.http_rpc_url=m),a.socket_url||(a.socket_url=f),a.cell_classes||(a.cell_classes=i),a.action_handlers||(a.action_handlers=p),super(a)}}export{v as A,u as a};
