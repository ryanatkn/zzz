// generated by src/lib/action_metatypes.gen.ts - DO NOT EDIT OR RISK LOST DATA

import {z} from 'zod';

import type {Action_Inputs, Action_Outputs} from '$lib/action_collections.js';

/**
 * All action method names. Request/response actions have two types per method.
 */
export const Action_Method = z.enum([
	'completion_progress',
	'create_completion',
	'create_directory',
	'delete_diskfile',
	'filer_change',
	'load_session',
	'ollama_copy',
	'ollama_create',
	'ollama_delete',
	'ollama_list',
	'ollama_ps',
	'ollama_pull',
	'ollama_show',
	'ping',
	'toggle_main_menu',
	'update_diskfile',
]);
export type Action_Method = z.infer<typeof Action_Method>;

/**
 * Names of all request_response actions.
 */
export const Request_Response_Action_Method = z.enum([
	'create_completion',
	'create_directory',
	'delete_diskfile',
	'load_session',
	'ping',
	'update_diskfile',
]);
export type Request_Response_Action_Method = z.infer<typeof Request_Response_Action_Method>;

/**
 * Names of all remote_notification actions.
 */
export const Remote_Notification_Action_Method = z.enum(['completion_progress', 'filer_change']);
export type Remote_Notification_Action_Method = z.infer<typeof Remote_Notification_Action_Method>;

/**
 * Names of all local_call actions.
 */
export const Local_Call_Action_Method = z.enum([
	'ollama_copy',
	'ollama_create',
	'ollama_delete',
	'ollama_list',
	'ollama_ps',
	'ollama_pull',
	'ollama_show',
	'toggle_main_menu',
]);
export type Local_Call_Action_Method = z.infer<typeof Local_Call_Action_Method>;

/**
 * Names of all actions that may be handled on the client.
 */
export const Frontend_Action_Method = z.enum([
	'completion_progress',
	'create_completion',
	'create_directory',
	'delete_diskfile',
	'filer_change',
	'load_session',
	'ollama_copy',
	'ollama_create',
	'ollama_delete',
	'ollama_list',
	'ollama_ps',
	'ollama_pull',
	'ollama_show',
	'ping',
	'toggle_main_menu',
	'update_diskfile',
]);
export type Frontend_Action_Method = z.infer<typeof Frontend_Action_Method>;

/**
 * Names of all actions that may be handled on the server.
 */
export const Backend_Action_Method = z.enum([
	'completion_progress',
	'create_completion',
	'create_directory',
	'delete_diskfile',
	'filer_change',
	'load_session',
	'ping',
	'update_diskfile',
]);
export type Backend_Action_Method = z.infer<typeof Backend_Action_Method>;

/**
 * Interface for action dispatch functions.
 */
export interface Actions_Api {
	completion_progress: (
		input: Action_Inputs['completion_progress'],
	) => Promise<Action_Outputs['completion_progress']>;
	create_completion: (
		input: Action_Inputs['create_completion'],
	) => Promise<Action_Outputs['create_completion']>;
	create_directory: (
		input: Action_Inputs['create_directory'],
	) => Promise<Action_Outputs['create_directory']>;
	delete_diskfile: (
		input: Action_Inputs['delete_diskfile'],
	) => Promise<Action_Outputs['delete_diskfile']>;
	filer_change: (input: Action_Inputs['filer_change']) => Promise<Action_Outputs['filer_change']>;
	load_session: (input?: void) => Promise<Action_Outputs['load_session']>;
	ollama_copy: (input: Action_Inputs['ollama_copy']) => Promise<Action_Outputs['ollama_copy']>;
	ollama_create: (
		input: Action_Inputs['ollama_create'],
	) => Promise<Action_Outputs['ollama_create']>;
	ollama_delete: (
		input: Action_Inputs['ollama_delete'],
	) => Promise<Action_Outputs['ollama_delete']>;
	ollama_list: (input?: void) => Promise<Action_Outputs['ollama_list']>;
	ollama_ps: (input?: void) => Promise<Action_Outputs['ollama_ps']>;
	ollama_pull: (input: Action_Inputs['ollama_pull']) => Promise<Action_Outputs['ollama_pull']>;
	ollama_show: (input: Action_Inputs['ollama_show']) => Promise<Action_Outputs['ollama_show']>;
	ping: (input?: void) => Promise<Action_Outputs['ping']>;
	toggle_main_menu: (
		input?: Action_Inputs['toggle_main_menu'],
	) => Action_Outputs['toggle_main_menu'];
	update_diskfile: (
		input: Action_Inputs['update_diskfile'],
	) => Promise<Action_Outputs['update_diskfile']>;
}

// generated by src/lib/action_metatypes.gen.ts - DO NOT EDIT OR RISK LOST DATA
